name: ci

on:
  push:
    branches: [main]
    paths-ignore: ['**.md']
  pull_request:
    branches: [main]
    paths-ignore: ['**.md']
  release:
    types: [published]

env:
  ARTIFACT_DIR: .artifacts
  ARTIFACT_RETENTION_DAYS: 5

jobs:
  version:
    runs-on: ubuntu-latest

    outputs:
      TAG: ${{ steps.tag.outputs.TAG }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      with:
        ref: main
        fetch-depth: '0'

    - name: Get tag if tagged/released and set TAG env var
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      run: |
        TAG="$GITHUB_REF_NAME"
        if [[ $TAG == "v"* ]]; then
          TAG="${TAG:1}"
        fi
        {
          echo "TAG=$TAG"
        } | tee -a "$GITHUB_ENV"

    - name: Update VERSION in version file and push
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      run: |
        VERSION_FILE="./src/version.hpp"
        OLD_TAG=$(grep VERSION $VERSION_FILE | cut -d ' ' -f3 | tr -d '"' | tr -d '\n')
        echo "OLD_TAG: $OLD_TAG"
        NEW_TAG="$TAG"
        echo "NEW_TAG: $NEW_TAG"
        if [[ "$NEW_TAG" == "$OLD_TAG" ]]; then
          echo "Old and new tags are the same! No update required!"
        else
          echo "Updating VERSION in version file [$OLD_TAG => $NEW_TAG]"
          sed -i -e "s|VERSION .*|VERSION \"$NEW_TAG\"|" $VERSION_FILE
          git config --global user.name 'Azeem Sajid'
          git config --global user.email 'iamAzeem@users.noreply.github.com'
          git diff "$VERSION_FILE"
          git add "$VERSION_FILE"
          git commit -m "Automatic version update from $OLD_TAG to $NEW_TAG."
          git push
          echo "Version updated successfully!"
        fi

    - name: Set TAG output parameter
      id: tag
      run: |
        VERSION_FILE="./src/version.hpp"
        TAG=$(grep VERSION $VERSION_FILE | cut -d ' ' -f3 | tr -d '"' | tr -d '\n')
        {
          echo "TAG=$TAG"
        } | tee -a "$GITHUB_OUTPUT"

  ci:
    needs: [version]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-13]

    runs-on: ${{ matrix.os }}

    outputs:
      TAG: ${{ needs.version.outputs.TAG }}

    env:
      TAG: ${{ needs.version.outputs.TAG }}
      AMD64_LINUX: amd64-linux
      ARM64_LINUX: arm64-linux
      AMD64_WINDOWS: amd64-windows
      AMD64_MACOSX: amd64-macosx

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ startsWith(github.ref, 'refs/tags/v') && 'main' || '' }}

    # --- Build ---

    - name: Install Dependencies
      if: ${{ runner.os == 'Linux' }}
      run: sudo apt install -y tree g++-mingw-w64 g++-aarch64-linux-gnu

    - name: Build (${{ env.AMD64_LINUX }})
      if: ${{ runner.os == 'Linux' }}
      env:
        CXX: g++
        STRIP: strip
        PREFIX: ${{ env.AMD64_LINUX }}
      run: |
        ./scripts/ci-build.bash
        ./tests/test.bash

    - name: Build (${{ env.ARM64_LINUX }})
      if: ${{ runner.os == 'Linux' }}
      env:
        CXX: aarch64-linux-gnu-g++
        STRIP: aarch64-linux-gnu-strip
        PREFIX: ${{ env.ARM64_LINUX }}
      run: ./scripts/ci-build.bash

    - name: Build (${{ env.AMD64_WINDOWS }})
      if: ${{ runner.os == 'Linux' }}
      env:
        CXX: x86_64-w64-mingw32-g++
        STRIP: x86_64-w64-mingw32-strip
        PREFIX: ${{ env.AMD64_WINDOWS }}
      run: ./scripts/ci-build.bash

    - name: Build (${{ env.AMD64_MACOSX }})
      if: ${{ runner.os == 'macOS' }}
      env:
        CXX: clang++
        STRIP: strip
        PREFIX: ${{ env.AMD64_MACOSX }}
      run: |
        ./scripts/ci-build.bash
        ./tests/test.bash

    # --- Upload ---

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.AMD64_LINUX }}.tar.gz)
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.AMD64_LINUX }}.tar.gz
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.AMD64_LINUX }}.tar.gz
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.AMD64_LINUX }}.zip)
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.AMD64_LINUX }}.zip
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.AMD64_LINUX }}.zip
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.ARM64_LINUX }}.tar.gz)
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.ARM64_LINUX }}.tar.gz
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.ARM64_LINUX }}.tar.gz
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.ARM64_LINUX }}.zip)
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.ARM64_LINUX }}.zip
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.ARM64_LINUX }}.zip
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.AMD64_WINDOWS }}.tar.gz)
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.AMD64_WINDOWS }}.tar.gz
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.AMD64_WINDOWS }}.tar.gz
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.AMD64_WINDOWS }}.zip)
      if: ${{ runner.os == 'Linux' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.AMD64_WINDOWS }}.zip
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.AMD64_WINDOWS }}.zip
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.AMD64_MACOSX }}.tar.gz)
      if: ${{ runner.os == 'macOS' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.AMD64_MACOSX }}.tar.gz
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.AMD64_MACOSX }}.tar.gz
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    - name: Upload (spancopy-${{ env.TAG }}-${{ env.AMD64_MACOSX }}.zip)
      if: ${{ runner.os == 'macOS' }}
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-${{ env.TAG }}-${{ env.AMD64_MACOSX }}.zip
        path: ${{ env.ARTIFACT_DIR }}/spancopy-${{ env.TAG }}-${{ env.AMD64_MACOSX }}.zip
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error

    # --- Upload on tag/release ---

    - name: Upload release artifacts
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: ./scripts/ci-upload-release-artifacts.bash

  publish-winget-package:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ci]
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Install wingetcreate
      run: |
        curl -L https://aka.ms/wingetcreate/latest -o wingetcreate
        chmod +x wingetcreate
        ./wingetcreate info

    - name: Update
      env:
        TAG: ${{ needs.ci.outputs.TAG }}
        PAT: ${{ secrets.SPANCOPY_WINGET_PAT }}
        PKG_ID: "iamAzeem.spancopy"
      run: |
        URL="https://github.com/iamazeem/spancopy/releases/download/v$TAG/spancopy-$TAG-amd64-windows.zip"
        ./wingetcreate update "$PKG_ID" \
          --version "$TAG" \
          --urls "$URL" \
          --out "$GITHUB_WORKSPACE/manifests" \
          --token "$PAT" \
          --prtitle "New version: $PKG_ID v$TAG" \
          --submit

    - name: Upload manifest
      uses: actions/upload-artifact@v4
      with:
        name: spancopy-winget-manifest
        path: ${{ github.workspace }}/manifests
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if-no-files-found: error
